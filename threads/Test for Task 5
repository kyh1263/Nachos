
    private static class Test5 implements Runnable
    {
    	String name;
    	Lock lockA,lockB,lockC;
    	Test5(String msg,Lock lock1,Lock lock2,Lock lock3)
    	{
    		name=msg;
    		lockA=lock1;
    		lockB=lock2;
    		lockC=lock3;
    	}
    	public void run()
    	{
    		System.out.println(name+" starts");
    		if(lockC!=null)
    		{
    			System.out.println(name+" waits for lock3");
    			lockC.acquire();
    			System.out.println(name+" gets lock3");
    		}
    		if(lockB!=null)
    		{
    			System.out.println(name+" waits for lock2");
    			lockB.acquire();
    			System.out.println(name+" gets lock2");
    		}
    		if(lockA!=null)
    		{
    			System.out.println(name+" waits for lock1");
    			lockA.acquire();
    			System.out.println(name+" gets lock1");
    		}
    		KThread.yield();
    		boolean intStatus=Machine.interrupt().disable();
    		System.out.println(name+"'s effective priority is "+ThreadedKernel.scheduler.getEffectivePriority());
    		Machine.interrupt().restore(intStatus);
    		KThread.yield();
    		if(lockC!=null)
    			lockC.release();
    		if(lockB!=null)
    			lockB.release();
    		if(lockA!=null)
    			lockA.release();
    		System.out.println(name+" finishes");
    	}
    }
    
    public static void selfTest5()
    {
    	final int module=5,number=5; //module<=PriorityScheduler.priorityMaximum+1;
    	int i,r=0;
    	boolean intStatus;
    	Lock lock1=new Lock(),lock2=new Lock(),lock3=new Lock();
    	KThread thread;
    	Queue<KThread> Queue=new LinkedList<KThread>();
    	for(i=1;i<=number;i++)
    	{
    		thread=new KThread(new Test5("A"+i,null,null,null));
    		Queue.add(thread);
    		thread.fork();
    	}
    	for(i=1;i<=number;i++)
    	{
    		thread=new KThread(new Test5("B"+i,lock1,null,null));
    		Queue.add(thread);
    		thread.fork();
    	}
    	for(i=1;i<=number;i++)
    	{
    		thread=new KThread(new Test5("C"+i,lock1,lock2,null));
    		Queue.add(thread);
    		thread.fork();
    	}
    	for(i=1;i<=number;i++)
    	{
    		thread=new KThread(new Test5("D"+i,lock1,lock2,lock3));
    		Queue.add(thread);
    		thread.fork();
    	}
    	KThread.yield();
    	Iterator<KThread> iterator=Queue.iterator();
    	while(iterator.hasNext())
    	{
    		intStatus=Machine.interrupt().disable();
    		ThreadedKernel.scheduler.setPriority(iterator.next(),r);
    		Machine.interrupt().restore(intStatus);
    		r=(r+1)%module;
    	}
    }
